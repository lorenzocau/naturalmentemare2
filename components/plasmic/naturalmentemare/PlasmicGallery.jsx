// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oim27Bu1ThuTn7RkGgxh5P
// Component: wVeuoJTCIrIl
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import Button2 from "../../Button2"; // plasmic-import: Yp4SbBaPO1b8/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import Select from "../../Select"; // plasmic-import: USQM_YP1YWs1/component
import { useScreenVariants as useScreenVariantsith9ZDalCwV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ith9ZDalCw-V/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oim27Bu1ThuTn7RkGgxh5P/projectcss
import sty from "./PlasmicGallery.module.css"; // plasmic-import: wVeuoJTCIrIl/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: K_XxEM7Q4cIW/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: S_tcS_gFiIGf/icon
import Whatsapp128SvgrepoComsvgIcon from "./icons/PlasmicIcon__Whatsapp128SvgrepoComsvg"; // plasmic-import: FR01N8LietG4/icon
import InstagramSvgrepoComsvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoComsvg"; // plasmic-import: Ykw0IS2_E4Wg/icon
import TiktokSvgrepoComsvgIcon from "./icons/PlasmicIcon__TiktokSvgrepoComsvg"; // plasmic-import: -HYOxdp1gh1y/icon
import MailAlt3SvgrepoComsvgIcon from "./icons/PlasmicIcon__MailAlt3SvgrepoComsvg"; // plasmic-import: lxw0LriFgpMb/icon

createPlasmicElementProxy;

export const PlasmicGallery__VariantProps = new Array();

export const PlasmicGallery__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGallery__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textbox3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textbox6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "dateTimePicker5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "dateTimePicker6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "-1"
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "-1"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsith9ZDalCwV()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__owKs6)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cgufH)}
              >
                <Button2
                  className={classNames("__wab_instance", sty.button2__aadLy)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__uOiT1)}
                      role={"img"}
                    />
                  }
                  link={`/`}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__zusmQ)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__raWTv)}
                    displayHeight={"60px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"60px"}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHomepage"] = true
                        ? (() => {
                            const actionArgs = { destination: `/` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHomepage"] != null &&
                        typeof $steps["goToHomepage"] === "object" &&
                        typeof $steps["goToHomepage"].then === "function"
                      ) {
                        $steps["goToHomepage"] = await $steps["goToHomepage"];
                      }
                    }}
                    src={{
                      src: "/plasmic/naturalmentemare/images/fishingBoatBlackSilhouetteSmallShipsInFlatDesignKidToyStyleIllustrationOnWhiteBackgroundVectorRemovebgPreviewpng.png",
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mzzTk
                    )}
                  >
                    {""}
                  </div>
                </Button2>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vfrj)}
                >
                  <Button2
                    className={classNames("__wab_instance", sty.button2__qEqHz)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg___258J)}
                        role={"img"}
                      />
                    }
                    link={`/`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___4K6MU)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rW4K
                      )}
                    >
                      {"Home"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__aHj1)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__stiQp)}
                        role={"img"}
                      />
                    }
                    link={`/attivita`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__wW7Dy)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ls0Zg
                      )}
                    >
                      {"Attivit\u00e0"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__mlGmy)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg___58Ac)}
                        role={"img"}
                      />
                    }
                    link={`/team`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__o44L)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9PhN
                      )}
                    >
                      {"Chi siamo"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__yzQeu)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__jHxg)}
                        role={"img"}
                      />
                    }
                    link={`/gallery`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__dWUqE)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Whai
                      )}
                    >
                      {"Gallery"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__xoKhL)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg___3FrEc)}
                        role={"img"}
                      />
                    }
                    link={`/contatti`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__wo0Q)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wcFs
                      )}
                    >
                      {"Contatti"}
                    </div>
                  </Button2>
                </Stack__>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0EHpI)}
                  >
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button
                      )}
                    >
                      {"Sign up"}
                    </button>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2___38Z9D
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__qOZoh)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7CmgG
                          )}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o394I
                        )}
                      >
                        {"Log in"}
                      </div>
                    </Button2>
                  </div>
                ) : null}
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__xy8Zq
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {""}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__vlC6U
                  )}
                  component={Link}
                  href={"https://wa.me/3758002079"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  <Whatsapp128SvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__mMi31)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lTaPa
                    )}
                  >
                    {" Scrivici su Whatsapp!"}
                  </div>
                </PlasmicLink__>
              </Stack__>
            </Stack__>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__pp2JI)}>
            <div className={classNames(projectcss.all, sty.freeBox__oFlGb)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__aj3XC)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qVTbz)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__csUri)}
                      displayHeight={"40px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      src={{
                        src: "/plasmic/naturalmentemare/images/fishingBoatBlackSilhouetteSmallShipsInFlatDesignKidToyStyleIllustrationOnWhiteBackgroundVectorRemovebgPreviewpng.png",
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined
                      }}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mDx2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bsvVw
                        )}
                      >
                        {"Seguici sui nostri social!"}
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1Rq5R
                        )}
                      >
                        <InstagramSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__k9TtD)}
                          role={"img"}
                        />

                        <TiktokSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__awcS)}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mLbts
                    )}
                  >
                    {"Contatti"}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yr1Z)}
                  >
                    <MailAlt3SvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__cXqxz)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mbWd0
                      )}
                    >
                      {"infonaturalmente.mare@gmail.com"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fqyXn)}
                  >
                    <MailAlt3SvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__g5QGg)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sApty
                      )}
                    >
                      {"naturalmentemare@pec.it"}
                    </div>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mX2Ie
                    )}
                  >
                    {"Informazioni"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iw8Qr
                    )}
                  >
                    {
                      "Naturalmente Mare APS ASD\nVia Veduro 3, Castenaso (BO), 40055"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4X0L6
                    )}
                  >
                    {"C.F.: 91464590370"}
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__cCyOx)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/naturalmentemare/images/image2.png",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.column__qwt2V)}
                />

                <div className={classNames(projectcss.all, sty.column__gfDip)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0BMt7)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"foreground3"}
                      data-plasmic-override={overrides.foreground3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground3)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oagNs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___55R0L
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___34EbA
                            )}
                          />
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nOv53)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"foreground6"}
                        data-plasmic-override={overrides.foreground6}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.foreground6)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qw1Wb
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__s32Mc
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__w2RrI
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__lLjZp
                                )}
                              >
                                <input
                                  data-plasmic-name={"textbox3"}
                                  data-plasmic-override={overrides.textbox3}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textbox3
                                  )}
                                  onChange={e => {
                                    generateStateOnChangeProp($state, [
                                      "textbox3",
                                      "value"
                                    ])(e.target.value);
                                  }}
                                  placeholder={"Nome e Cognome"}
                                  ref={ref => {
                                    $refs["textbox3"] = ref;
                                  }}
                                  size={1}
                                  type={"text"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textbox3",
                                      "value"
                                    ]) ?? ""
                                  }
                                />

                                <input
                                  data-plasmic-name={"textbox6"}
                                  data-plasmic-override={overrides.textbox6}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textbox6
                                  )}
                                  onChange={e => {
                                    generateStateOnChangeProp($state, [
                                      "textbox6",
                                      "value"
                                    ])(e.target.value);
                                  }}
                                  placeholder={"Indirizzo E-mail"}
                                  ref={ref => {
                                    $refs["textbox6"] = ref;
                                  }}
                                  size={1}
                                  type={"text"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textbox6",
                                      "value"
                                    ]) ?? ""
                                  }
                                />

                                {(() => {
                                  const child$Props = {
                                    autoSize: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textArea2
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["textArea2", "value"],
                                        AntdTextArea_Helpers
                                      ),
                                    placeholder: "Messaggio (opzionale)",
                                    value: generateStateValueProp($state, [
                                      "textArea2",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "textArea2.value"
                                      }
                                    ],

                                    [],
                                    AntdTextArea_Helpers ?? {},
                                    child$Props
                                  );
                                  return (
                                    <AntdTextArea
                                      data-plasmic-name={"textArea2"}
                                      data-plasmic-override={
                                        overrides.textArea2
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__q4CcV
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.dateTimePicker5
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["dateTimePicker5", "value"],
                                          AntdDatePicker_Helpers
                                        ),
                                      popupScopeClassName:
                                        sty["dateTimePicker5__datePickerPopup"],
                                      value: generateStateValueProp($state, [
                                        "dateTimePicker5",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName:
                                            "dateTimePicker5.value"
                                        }
                                      ],

                                      [],
                                      AntdDatePicker_Helpers ?? {},
                                      child$Props
                                    );
                                    return (
                                      <AntdDatePicker
                                        data-plasmic-name={"dateTimePicker5"}
                                        data-plasmic-override={
                                          overrides.dateTimePicker5
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.dateTimePicker6
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["dateTimePicker6", "value"],
                                          AntdDatePicker_Helpers
                                        ),
                                      popupScopeClassName:
                                        sty["dateTimePicker6__datePickerPopup"],
                                      value: generateStateValueProp($state, [
                                        "dateTimePicker6",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName:
                                            "dateTimePicker6.value"
                                        }
                                      ],

                                      [],
                                      AntdDatePicker_Helpers ?? {},
                                      child$Props
                                    );
                                    return (
                                      <AntdDatePicker
                                        data-plasmic-name={"dateTimePicker6"}
                                        data-plasmic-override={
                                          overrides.dateTimePicker6
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                  <AntdTooltip
                                    data-plasmic-name={"tooltip"}
                                    data-plasmic-override={overrides.tooltip}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tooltip
                                    )}
                                    titleText={``}
                                  >
                                    <Select
                                      data-plasmic-name={"select6"}
                                      data-plasmic-override={overrides.select6}
                                      aria-label={``}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select6
                                      )}
                                      onChange={(...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "select6",
                                          "value"
                                        ])(eventArgs[0]);
                                      }}
                                      options={(() => {
                                        const __composite = [
                                          { value: null, label: null },
                                          { value: null, label: null },
                                          { value: null, label: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null }
                                        ];

                                        __composite["0"]["value"] = "-1";
                                        __composite["0"]["label"] = "Adulti";
                                        __composite["1"]["value"] = "0";
                                        __composite["1"]["label"] = "0";
                                        __composite["2"]["value"] = "1";
                                        __composite["2"]["label"] = "1";
                                        __composite["3"]["value"] = "2";
                                        __composite["4"]["value"] = "3";
                                        __composite["5"]["value"] = "4";
                                        __composite["6"]["value"] = "5";
                                        __composite["7"]["value"] = "6";
                                        __composite["8"]["value"] = "7";
                                        __composite["9"]["value"] = "8";
                                        __composite["10"]["value"] = "9";
                                        return __composite;
                                      })()}
                                      value={generateStateValueProp($state, [
                                        "select6",
                                        "value"
                                      ])}
                                    />
                                  </AntdTooltip>
                                  <Select
                                    data-plasmic-name={"select4"}
                                    data-plasmic-override={overrides.select4}
                                    aria-label={``}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select4
                                    )}
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select4",
                                        "value"
                                      ])(eventArgs[0]);
                                    }}
                                    options={(() => {
                                      const __composite = [
                                        { value: null, label: null },
                                        { value: null, label: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null }
                                      ];

                                      __composite["0"]["value"] = "-1";
                                      __composite["0"]["label"] = "Bambini ";
                                      __composite["1"]["value"] = "1";
                                      __composite["1"]["label"] = "1";
                                      __composite["2"]["value"] = "2";
                                      __composite["3"]["value"] = "3";
                                      __composite["4"]["value"] = "4";
                                      __composite["5"]["value"] = "5";
                                      __composite["6"]["value"] = "6";
                                      __composite["7"]["value"] = "7";
                                      __composite["8"]["value"] = "8";
                                      __composite["9"]["value"] = "9";
                                      __composite["10"]["value"] = "0";
                                      return __composite;
                                    })()}
                                    value={generateStateValueProp($state, [
                                      "select4",
                                      "value"
                                    ])}
                                  />
                                </div>
                              </Stack__>
                              <Button2
                                className={classNames(
                                  "__wab_instance",
                                  sty.button2__xWeeX
                                )}
                                endIcon={
                                  <Icon38Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__aGb29
                                    )}
                                    role={"img"}
                                  />
                                }
                                startIcon={
                                  <ChecksvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__wZAhQ
                                    )}
                                    role={"img"}
                                  />
                                }
                                submitsForm={true}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ey0Xv
                                  )}
                                >
                                  {"Invia prenotazione"}
                                </div>
                              </Button2>
                            </Stack__>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__n26Zk
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pPe4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__r3T0Y
                                )}
                              >
                                {
                                  "Inserire un nominativo e un indirizzo e-mail.\nInfine inserire la data di inizio,di fine e il numero di adulti e di bambini ( 0 - 14 anni compresi)"
                                }
                              </div>
                            </div>
                          </div>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </div>
              </Stack__>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "button",
    "columns",
    "foreground3",
    "foreground6",
    "textbox3",
    "textbox6",
    "textArea2",
    "dateTimePicker5",
    "dateTimePicker6",
    "tooltip",
    "select6",
    "select4"
  ],

  section: ["section", "button"],
  button: ["button"],
  columns: [
    "columns",
    "foreground3",
    "foreground6",
    "textbox3",
    "textbox6",
    "textArea2",
    "dateTimePicker5",
    "dateTimePicker6",
    "tooltip",
    "select6",
    "select4"
  ],

  foreground3: ["foreground3"],
  foreground6: [
    "foreground6",
    "textbox3",
    "textbox6",
    "textArea2",
    "dateTimePicker5",
    "dateTimePicker6",
    "tooltip",
    "select6",
    "select4"
  ],

  textbox3: ["textbox3"],
  textbox6: ["textbox6"],
  textArea2: ["textArea2"],
  dateTimePicker5: ["dateTimePicker5"],
  dateTimePicker6: ["dateTimePicker6"],
  tooltip: ["tooltip", "select6"],
  select6: ["select6"],
  select4: ["select4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGallery__ArgProps,
          internalVariantPropNames: PlasmicGallery__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGallery__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGallery";
  } else {
    func.displayName = `PlasmicGallery.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oim27Bu1ThuTn7RkGgxh5P"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicGallery = Object.assign(
  // Top-level PlasmicGallery renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    button: makeNodeComponent("button"),
    columns: makeNodeComponent("columns"),
    foreground3: makeNodeComponent("foreground3"),
    foreground6: makeNodeComponent("foreground6"),
    textbox3: makeNodeComponent("textbox3"),
    textbox6: makeNodeComponent("textbox6"),
    textArea2: makeNodeComponent("textArea2"),
    dateTimePicker5: makeNodeComponent("dateTimePicker5"),
    dateTimePicker6: makeNodeComponent("dateTimePicker6"),
    tooltip: makeNodeComponent("tooltip"),
    select6: makeNodeComponent("select6"),
    select4: makeNodeComponent("select4"),
    // Metadata about props expected for PlasmicGallery
    internalVariantProps: PlasmicGallery__VariantProps,
    internalArgProps: PlasmicGallery__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGallery;
/* prettier-ignore-end */
