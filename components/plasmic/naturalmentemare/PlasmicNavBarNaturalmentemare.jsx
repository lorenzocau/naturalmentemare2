// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oim27Bu1ThuTn7RkGgxh5P
// Component: ILQN6jAtEyIa
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button2 from "../../Button2"; // plasmic-import: Yp4SbBaPO1b8/component
import { useScreenVariants as useScreenVariantsith9ZDalCwV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ith9ZDalCw-V/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oim27Bu1ThuTn7RkGgxh5P/projectcss
import sty from "./PlasmicNavBarNaturalmentemare.module.css"; // plasmic-import: ILQN6jAtEyIa/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: K_XxEM7Q4cIW/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: S_tcS_gFiIGf/icon

createPlasmicElementProxy;

export const PlasmicNavBarNaturalmentemare__VariantProps = new Array();

export const PlasmicNavBarNaturalmentemare__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavBarNaturalmentemare__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsith9ZDalCwV()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__luy1V)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"60px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"60px"}
          src={{
            src: "/plasmic/naturalmentemare/images/fishingBoatBlackSilhouetteSmallShipsInFlatDesignKidToyStyleIllustrationOnWhiteBackgroundVectorRemovebgPreviewpng.png",
            fullWidth: 500,
            fullHeight: 500,
            aspectRatio: undefined
          }}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jzH9S)}
        >
          <Button2
            className={classNames("__wab_instance", sty.button2__zHTkx)}
            color={"clear"}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__lxuyc)}
                role={"img"}
              />
            }
            startIcon={
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__n5FvB)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__maal7
              )}
            >
              {"Home"}
            </div>
          </Button2>
          <Button2
            className={classNames("__wab_instance", sty.button2__rtpAl)}
            color={"clear"}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg___0IoKq)}
                role={"img"}
              />
            }
            startIcon={
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg___8Nork)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__hqcf3
              )}
            >
              {"Eventi"}
            </div>
          </Button2>
          <Button2
            className={classNames("__wab_instance", sty.button2__kxEfv)}
            color={"clear"}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__knZti)}
                role={"img"}
              />
            }
            startIcon={
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__kCr6A)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rGdla
              )}
            >
              {"Chi siamo"}
            </div>
          </Button2>
          <Button2
            className={classNames("__wab_instance", sty.button2__aKfGn)}
            color={"clear"}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__pck6U)}
                role={"img"}
              />
            }
            startIcon={
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__yUvur)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fVvH
              )}
            >
              {"Contattaci"}
            </div>
          </Button2>
          <Button2
            className={classNames("__wab_instance", sty.button2__p5Zxw)}
            endIcon={
              <Icon38Icon
                className={classNames(projectcss.all, sty.svg__fDpmB)}
                role={"img"}
              />
            }
            startIcon={
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__bz2XB)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nUsxE
              )}
            >
              {"Sign up"}
            </div>
          </Button2>
        </Stack__>
        {false ? (
          <div className={classNames(projectcss.all, sty.freeBox__iezao)}>
            <button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.button
              )}
            >
              {"Sign up"}
            </button>
            <Button2
              className={classNames("__wab_instance", sty.button2__jeGuh)}
              color={"clear"}
              endIcon={
                <Icon38Icon
                  className={classNames(projectcss.all, sty.svg__oyPXn)}
                  role={"img"}
                />
              }
              startIcon={
                <ChecksvgIcon
                  className={classNames(projectcss.all, sty.svg__stDb)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bvscX
                )}
              >
                {"Log in"}
              </div>
            </Button2>
          </div>
        ) : null}
      </Stack__>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "button"],
  img: ["img"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavBarNaturalmentemare__ArgProps,
          internalVariantPropNames: PlasmicNavBarNaturalmentemare__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavBarNaturalmentemare__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBarNaturalmentemare";
  } else {
    func.displayName = `PlasmicNavBarNaturalmentemare.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBarNaturalmentemare = Object.assign(
  // Top-level PlasmicNavBarNaturalmentemare renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicNavBarNaturalmentemare
    internalVariantProps: PlasmicNavBarNaturalmentemare__VariantProps,
    internalArgProps: PlasmicNavBarNaturalmentemare__ArgProps
  }
);

export default PlasmicNavBarNaturalmentemare;
/* prettier-ignore-end */
