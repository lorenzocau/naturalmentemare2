// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oim27Bu1ThuTn7RkGgxh5P
// Component: of49UJebE91W
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import Button2 from "../../Button2"; // plasmic-import: Yp4SbBaPO1b8/component
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdTooltip } from "@plasmicpkgs/antd5/skinny/registerTooltip";
import Select from "../../Select"; // plasmic-import: USQM_YP1YWs1/component
import { useScreenVariants as useScreenVariantsith9ZDalCwV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ith9ZDalCw-V/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: oim27Bu1ThuTn7RkGgxh5P/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: of49UJebE91W/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: K_XxEM7Q4cIW/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: S_tcS_gFiIGf/icon
import Whatsapp128SvgrepoComsvgIcon from "./icons/PlasmicIcon__Whatsapp128SvgrepoComsvg"; // plasmic-import: FR01N8LietG4/icon
import InstagramSvgrepoComsvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoComsvg"; // plasmic-import: Ykw0IS2_E4Wg/icon
import TiktokSvgrepoComsvgIcon from "./icons/PlasmicIcon__TiktokSvgrepoComsvg"; // plasmic-import: -HYOxdp1gh1y/icon
import MailAlt3SvgrepoComsvgIcon from "./icons/PlasmicIcon__MailAlt3SvgrepoComsvg"; // plasmic-import: lxw0LriFgpMb/icon

createPlasmicElementProxy;

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textbox2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textbox5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "dateTimePicker.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "dateTimePicker2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "-1"
      },
      {
        path: "select3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "-1"
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "textbox3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textbox6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textArea2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "dateTimePicker5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "dateTimePicker6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "select6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "-1"
      },
      {
        path: "select4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "-1"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsith9ZDalCwV()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <section className={classNames(projectcss.all, sty.section__vfP5X)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vXxa7)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__htMu)}
              >
                <Button2
                  className={classNames("__wab_instance", sty.button2__sLjsy)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__lgQbe)}
                      role={"img"}
                    />
                  }
                  link={`/`}
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__o6Jy)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__yUh0T)}
                    displayHeight={"60px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"60px"}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHomepage"] = true
                        ? (() => {
                            const actionArgs = { destination: `/` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHomepage"] != null &&
                        typeof $steps["goToHomepage"] === "object" &&
                        typeof $steps["goToHomepage"].then === "function"
                      ) {
                        $steps["goToHomepage"] = await $steps["goToHomepage"];
                      }
                    }}
                    src={{
                      src: "/plasmic/naturalmentemare/images/fishingBoatBlackSilhouetteSmallShipsInFlatDesignKidToyStyleIllustrationOnWhiteBackgroundVectorRemovebgPreviewpng.png",
                      fullWidth: 500,
                      fullHeight: 500,
                      aspectRatio: undefined
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wxoJq
                    )}
                  >
                    {""}
                  </div>
                </Button2>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hpj42)}
                >
                  <Button2
                    className={classNames("__wab_instance", sty.button2__bloNb)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__ekHen)}
                        role={"img"}
                      />
                    }
                    link={`/`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__iak7)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iUcK0
                      )}
                    >
                      {"Home"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__d1Kv4)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__ohUzc)}
                        role={"img"}
                      />
                    }
                    link={`/attivita`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__dLav)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ofbts
                      )}
                    >
                      {"Attivit\u00e0"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__dSvF0)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__faOM)}
                        role={"img"}
                      />
                    }
                    link={`/team`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__rS2Jx)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r4Xwf
                      )}
                    >
                      {"Chi siamo"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__ryKcj)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__hZckA)}
                        role={"img"}
                      />
                    }
                    link={`/gallery`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__dtjV)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wfzOo
                      )}
                    >
                      {"Gallery"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__goDnz)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__tgPs1)}
                        role={"img"}
                      />
                    }
                    link={`/contatti`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__fla5A)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ylLga
                      )}
                    >
                      {"Contatti"}
                    </div>
                  </Button2>
                </Stack__>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kLdL)}
                  >
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button
                      )}
                    >
                      {"Sign up"}
                    </button>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__dVzN
                      )}
                      color={"clear"}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__hcBS)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__hl5Jx)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o2A7P
                        )}
                      >
                        {"Log in"}
                      </div>
                    </Button2>
                  </div>
                ) : null}
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__oaw4K
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {""}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mvckM
                  )}
                  component={Link}
                  href={"https://wa.me/3758002079"}
                  platform={"nextjs"}
                  target={"_blank"}
                >
                  <Whatsapp128SvgrepoComsvgIcon
                    className={classNames(projectcss.all, sty.svg__u1LJ8)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yOXft
                    )}
                  >
                    {" Scrivici su Whatsapp!"}
                  </div>
                </PlasmicLink__>
              </Stack__>
            </Stack__>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox___15Yaa)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0TpLh)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vYv04
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ textDecoration: "underline" }}
                    >
                      {"Una nuova realt\u00e0"}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nlEbe
                  )}
                >
                  {"Siamo dei marinai arghhh!!\nOfferta grossa "}
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mQ3Vi)}
              >
                <Button2
                  className={classNames("__wab_instance", sty.button2__bg0Zy)}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__mSc76)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__cugSp)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kcJfe
                    )}
                  >
                    {"Prenota ora"}
                  </div>
                </Button2>
                <Button2
                  className={classNames("__wab_instance", sty.button2__gmyPy)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__ibOYg)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__jrj6T)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__trA3
                    )}
                  >
                    {"Learn more\u2026"}
                  </div>
                </Button2>
              </Stack__>
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__kagCg)}
          >
            <div className={classNames(projectcss.all, sty.columns__jwkiQ)}>
              <div className={classNames(projectcss.all, sty.column__uoQgI)}>
                <div
                  data-plasmic-name={"background2"}
                  data-plasmic-override={overrides.background2}
                  className={classNames(projectcss.all, sty.background2)}
                />

                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__ftXwy)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"320px"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: "/plasmic/naturalmentemare/images/p1010861Jpg.jpg",
                    fullWidth: 1920,
                    fullHeight: 1080,
                    aspectRatio: undefined
                  }}
                />

                <section
                  className={classNames(projectcss.all, sty.section__jRp2U)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___5TFzg)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dZ93)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"copy"}
                    data-plasmic-override={overrides.copy}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.copy)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__xy71J)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xV6C8
                        )}
                      >
                        {"ATTIVITA ESTIVE 2024"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tLQeg
                        )}
                      >
                        {"Esplora con noi il Gargano"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__afYDi
                        )}
                      >
                        {
                          "Prendi in mano il timone e scopri questa magnifica terra ricca di storie e tradizioni.\nUn vasto programma didattico dedicato ai nostri soci, adatto e coinvolgente per tutti.\nIl pacchetto contiene:\n\u25b8 Alloggio nel borgo medievale di Vieste\n\u25b8 Un programma vasto e personalizzabile\n\u25b8 Assicurazione e Tesseramento per l\u2019anno\n\u25b8 Il nostro Team a vostra disposizione"
                        }
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pm5Q9)}
                    >
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__eg9Z4
                        )}
                        color={"blue"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kNf8G
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(projectcss.all, sty.svg__sTj)}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__n6Wko
                          )}
                        >
                          {"Inizia ora"}
                        </div>
                      </Button2>
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__rN14X
                        )}
                        color={"clear"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nuKad
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__l1H2G
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zco0N
                          )}
                        >
                          {"Scopri di pi\u00f9..."}
                        </div>
                      </Button2>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bvTzo)}
          >
            <div className={classNames(projectcss.all, sty.columns__aecEu)}>
              <div className={classNames(projectcss.all, sty.column__u851C)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__b5WTx)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"copy3"}
                    data-plasmic-override={overrides.copy3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.copy3)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dCd2Q)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dr2PK
                        )}
                      >
                        {"LE NOSTRE BARCHE"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2D6ZX
                        )}
                      >
                        {"SHIRANAMI"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gkwMi
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "Shiranami \u00e8 un natante di 8m, modello Tiki 26 progettato da James Wharram, costruito da un cantiere di Civitavecchia e restaurato dai membri dell\u2019associazione. \n\u00c8 un catamarano in legno, con armo velico \u201csloop\u201d con la particolarit\u00e0 di non utilizzare il boma, bens\u00ec un picco in testa d\u2019albero per favorire la sicurezza e vivibilit\u00e0 del pozzetto. \nNella sua storia, ha navigato il mar Tirreno, visitando spesso l\u2019arcipelago toscano e isole maggiori come Sardegna e Corsica. "
                            }
                          </React.Fragment>
                          {
                            <PlasmicLink__
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.link___87Gfe
                              )}
                              component={Link}
                              href={"/attivita"}
                              platform={"nextjs"}
                            >
                              {""}
                            </PlasmicLink__>
                          }

                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </Stack__>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vc3Qj
                      )}
                    >
                      {"DIVA"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mjO5A
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "Diva \u00e8 un\u2019imbarcazione di 11m, modello Gaia 36 cantiere Benello, costruita nel 1966 e restaurata dal presidente di Naturalmente Mare negli ultimi anni. \n\u00c8 un monoscafo in vetroresina, con armo velico \u201csloop\u201d che regala grandi emozioni durante la navigazione. \nNella sua storia, ha navigato per tutto l\u2019Adriatico e completato alcune traversate atlantiche sotto il comando dei suoi precedenti comandanti."
                          }
                        </React.Fragment>
                        {
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__pjhUw
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {""}
                          </PlasmicLink__>
                        }

                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__pAvPp)}
                    color={"clear"}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__fmMwz)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__a99Ve)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n4Bag
                      )}
                    >
                      {
                        "Scopri di pi\u00f9 sulle nostre attivit\u00e0 estive..."
                      }
                    </div>
                  </Button2>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__mwB8Q)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__k7Drk)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img___4B1Lv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/naturalmentemare/images/slide4Jpg.jpg",
                      fullWidth: 1920,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                  />

                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__lIs8H)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/naturalmentemare/images/slide3Jpg.jpg",
                      fullWidth: 1920,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                  />
                </Stack__>
              </div>
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__ziHpz)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground5"}
              data-plasmic-override={overrides.foreground5}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground5)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ovJlS)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iCzZf
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ textDecoration: "underline" }}
                    >
                      {"Prenota gi\u00e0 da ora:"}
                    </span>
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vfK1)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"foreground"}
                  data-plasmic-override={overrides.foreground}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hepxy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vnk39)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nR84T
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__njAz
                          )}
                        >
                          <input
                            data-plasmic-name={"textbox2"}
                            data-plasmic-override={overrides.textbox2}
                            className={classNames(
                              projectcss.all,
                              projectcss.input,
                              sty.textbox2
                            )}
                            onChange={e => {
                              generateStateOnChangeProp($state, [
                                "textbox2",
                                "value"
                              ])(e.target.value);
                            }}
                            placeholder={"Nome e Cognome"}
                            ref={ref => {
                              $refs["textbox2"] = ref;
                            }}
                            size={1}
                            type={"text"}
                            value={
                              generateStateValueProp($state, [
                                "textbox2",
                                "value"
                              ]) ?? ""
                            }
                          />

                          <input
                            data-plasmic-name={"textbox5"}
                            data-plasmic-override={overrides.textbox5}
                            className={classNames(
                              projectcss.all,
                              projectcss.input,
                              sty.textbox5
                            )}
                            onChange={e => {
                              generateStateOnChangeProp($state, [
                                "textbox5",
                                "value"
                              ])(e.target.value);
                            }}
                            placeholder={"Indirizzo E-mail"}
                            ref={ref => {
                              $refs["textbox5"] = ref;
                            }}
                            size={1}
                            type={"text"}
                            value={
                              generateStateValueProp($state, [
                                "textbox5",
                                "value"
                              ]) ?? ""
                            }
                          />

                          {(() => {
                            const child$Props = {
                              autoSize: true,
                              className: classNames(
                                "__wab_instance",
                                sty.textArea
                              ),
                              onChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["textArea", "value"],
                                  AntdTextArea_Helpers
                                ),
                              placeholder: "Messaggio (opzionale)",
                              value: generateStateValueProp($state, [
                                "textArea",
                                "value"
                              ])
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "textArea.value"
                                }
                              ],

                              [],
                              AntdTextArea_Helpers ?? {},
                              child$Props
                            );
                            return (
                              <AntdTextArea
                                data-plasmic-name={"textArea"}
                                data-plasmic-override={overrides.textArea}
                                {...child$Props}
                              />
                            );
                          })()}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pvUfb
                            )}
                          >
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.dateTimePicker
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["dateTimePicker", "value"],
                                    AntdDatePicker_Helpers
                                  ),
                                popupScopeClassName:
                                  sty["dateTimePicker__datePickerPopup"],
                                value: generateStateValueProp($state, [
                                  "dateTimePicker",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "dateTimePicker.value"
                                  }
                                ],

                                [],
                                AntdDatePicker_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdDatePicker
                                  data-plasmic-name={"dateTimePicker"}
                                  data-plasmic-override={
                                    overrides.dateTimePicker
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.dateTimePicker2
                                ),
                                onChange:
                                  generateStateOnChangePropForCodeComponents(
                                    $state,
                                    "value",
                                    ["dateTimePicker2", "value"],
                                    AntdDatePicker_Helpers
                                  ),
                                popupScopeClassName:
                                  sty["dateTimePicker2__datePickerPopup"],
                                value: generateStateValueProp($state, [
                                  "dateTimePicker2",
                                  "value"
                                ])
                              };
                              initializeCodeComponentStates(
                                $state,
                                [
                                  {
                                    name: "value",
                                    plasmicStateName: "dateTimePicker2.value"
                                  }
                                ],

                                [],
                                AntdDatePicker_Helpers ?? {},
                                child$Props
                              );
                              return (
                                <AntdDatePicker
                                  data-plasmic-name={"dateTimePicker2"}
                                  data-plasmic-override={
                                    overrides.dateTimePicker2
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                            <AntdTooltip
                              className={classNames(
                                "__wab_instance",
                                sty.tooltip___5DZiV
                              )}
                              titleText={``}
                            >
                              <Select
                                data-plasmic-name={"select5"}
                                data-plasmic-override={overrides.select5}
                                aria-label={``}
                                className={classNames(
                                  "__wab_instance",
                                  sty.select5
                                )}
                                onChange={(...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "select5",
                                    "value"
                                  ])(eventArgs[0]);
                                }}
                                options={(() => {
                                  const __composite = [
                                    { value: null, label: null },
                                    { value: null, label: null },
                                    { value: null, label: null },
                                    { value: null },
                                    { value: null },
                                    { value: null },
                                    { value: null },
                                    { value: null },
                                    { value: null },
                                    { value: null },
                                    { value: null }
                                  ];

                                  __composite["0"]["value"] = "-1";
                                  __composite["0"]["label"] = "Adulti";
                                  __composite["1"]["value"] = "0";
                                  __composite["1"]["label"] = "0";
                                  __composite["2"]["value"] = "1";
                                  __composite["2"]["label"] = "1";
                                  __composite["3"]["value"] = "2";
                                  __composite["4"]["value"] = "3";
                                  __composite["5"]["value"] = "4";
                                  __composite["6"]["value"] = "5";
                                  __composite["7"]["value"] = "6";
                                  __composite["8"]["value"] = "7";
                                  __composite["9"]["value"] = "8";
                                  __composite["10"]["value"] = "9";
                                  return __composite;
                                })()}
                                value={generateStateValueProp($state, [
                                  "select5",
                                  "value"
                                ])}
                              />
                            </AntdTooltip>
                            <Select
                              data-plasmic-name={"select3"}
                              data-plasmic-override={overrides.select3}
                              aria-label={``}
                              className={classNames(
                                "__wab_instance",
                                sty.select3
                              )}
                              onChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "select3",
                                  "value"
                                ])(eventArgs[0]);
                              }}
                              options={(() => {
                                const __composite = [
                                  { value: null, label: null },
                                  { value: null, label: null },
                                  { value: null },
                                  { value: null },
                                  { value: null },
                                  { value: null },
                                  { value: null },
                                  { value: null },
                                  { value: null },
                                  { value: null },
                                  { value: null }
                                ];

                                __composite["0"]["value"] = "-1";
                                __composite["0"]["label"] = "Bambini ";
                                __composite["1"]["value"] = "1";
                                __composite["1"]["label"] = "1";
                                __composite["2"]["value"] = "2";
                                __composite["3"]["value"] = "3";
                                __composite["4"]["value"] = "4";
                                __composite["5"]["value"] = "5";
                                __composite["6"]["value"] = "6";
                                __composite["7"]["value"] = "7";
                                __composite["8"]["value"] = "8";
                                __composite["9"]["value"] = "9";
                                __composite["10"]["value"] = "0";
                                return __composite;
                              })()}
                              value={generateStateValueProp($state, [
                                "select3",
                                "value"
                              ])}
                            />
                          </div>
                        </Stack__>
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button2__ijdWq
                          )}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__q5Eb6
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jnxMt
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___89Qpf
                            )}
                          >
                            {"Invia prenotazione"}
                          </div>
                        </Button2>
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qd3Fk
                        )}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vmtvW
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1Tli5
                          )}
                        >
                          {
                            "Inserire un nominativo e un indirizzo e-mail.\nInfine inserire la data di inizio,di fine e il numero di adulti e di bambini ( 0 - 14 anni compresi)"
                          }
                        </div>
                      </div>
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fLyYu)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__am8Ew)}
                />
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___27Nxw)}>
            <div className={classNames(projectcss.all, sty.freeBox___4An5J)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__maVmn)}
              >
                <div className={classNames(projectcss.all, sty.column__susz3)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___5RUvn)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__jSlkf)}
                      displayHeight={"40px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"40px"}
                      src={{
                        src: "/plasmic/naturalmentemare/images/fishingBoatBlackSilhouetteSmallShipsInFlatDesignKidToyStyleIllustrationOnWhiteBackgroundVectorRemovebgPreviewpng.png",
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined
                      }}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sxuuj)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b4Ou2
                        )}
                      >
                        {"Seguici sui nostri social!"}
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lBLd
                        )}
                      >
                        <InstagramSvgrepoComsvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___3EHpR
                          )}
                          role={"img"}
                        />

                        <TiktokSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__fhE3V)}
                          role={"img"}
                        />
                      </Stack__>
                    </Stack__>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__g14MY
                    )}
                  >
                    {"Contatti"}
                  </div>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yCz1E)}
                  >
                    <MailAlt3SvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__qZzdO)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__d4Xat
                      )}
                    >
                      {"infonaturalmente.mare@gmail.com"}
                    </div>
                  </Stack__>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0NBV)}
                  >
                    <MailAlt3SvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__lgPlx)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rBkB
                      )}
                    >
                      {"naturalmentemare@pec.it"}
                    </div>
                  </Stack__>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yInom
                    )}
                  >
                    {"Informazioni"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gruaf
                    )}
                  >
                    {
                      "Naturalmente Mare APS ASD\nVia Veduro 3, Castenaso (BO), 40055"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jYu0D
                    )}
                  >
                    {"C.F.: 91464590370"}
                  </div>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__ko687)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/naturalmentemare/images/image2.png",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: undefined
                    }}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.column___1Sv1C)}
                />

                <div className={classNames(projectcss.all, sty.column__ecsgh)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nUGhW)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"foreground3"}
                      data-plasmic-override={overrides.foreground3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.foreground3)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hm1L3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kLbe7
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ubHoF
                            )}
                          />
                        </div>
                      </Stack__>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vWiNy)}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"foreground6"}
                        data-plasmic-override={overrides.foreground6}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.foreground6)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4ZaU
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tEu2X
                            )}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___66JmF
                              )}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mGH
                                )}
                              >
                                <input
                                  data-plasmic-name={"textbox3"}
                                  data-plasmic-override={overrides.textbox3}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textbox3
                                  )}
                                  onChange={e => {
                                    generateStateOnChangeProp($state, [
                                      "textbox3",
                                      "value"
                                    ])(e.target.value);
                                  }}
                                  placeholder={"Nome e Cognome"}
                                  ref={ref => {
                                    $refs["textbox3"] = ref;
                                  }}
                                  size={1}
                                  type={"text"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textbox3",
                                      "value"
                                    ]) ?? ""
                                  }
                                />

                                <input
                                  data-plasmic-name={"textbox6"}
                                  data-plasmic-override={overrides.textbox6}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textbox6
                                  )}
                                  onChange={e => {
                                    generateStateOnChangeProp($state, [
                                      "textbox6",
                                      "value"
                                    ])(e.target.value);
                                  }}
                                  placeholder={"Indirizzo E-mail"}
                                  ref={ref => {
                                    $refs["textbox6"] = ref;
                                  }}
                                  size={1}
                                  type={"text"}
                                  value={
                                    generateStateValueProp($state, [
                                      "textbox6",
                                      "value"
                                    ]) ?? ""
                                  }
                                />

                                {(() => {
                                  const child$Props = {
                                    autoSize: true,
                                    className: classNames(
                                      "__wab_instance",
                                      sty.textArea2
                                    ),
                                    onChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "value",
                                        ["textArea2", "value"],
                                        AntdTextArea_Helpers
                                      ),
                                    placeholder: "Messaggio (opzionale)",
                                    value: generateStateValueProp($state, [
                                      "textArea2",
                                      "value"
                                    ])
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "value",
                                        plasmicStateName: "textArea2.value"
                                      }
                                    ],

                                    [],
                                    AntdTextArea_Helpers ?? {},
                                    child$Props
                                  );
                                  return (
                                    <AntdTextArea
                                      data-plasmic-name={"textArea2"}
                                      data-plasmic-override={
                                        overrides.textArea2
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___3Enbv
                                  )}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.dateTimePicker5
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["dateTimePicker5", "value"],
                                          AntdDatePicker_Helpers
                                        ),
                                      popupScopeClassName:
                                        sty["dateTimePicker5__datePickerPopup"],
                                      value: generateStateValueProp($state, [
                                        "dateTimePicker5",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName:
                                            "dateTimePicker5.value"
                                        }
                                      ],

                                      [],
                                      AntdDatePicker_Helpers ?? {},
                                      child$Props
                                    );
                                    return (
                                      <AntdDatePicker
                                        data-plasmic-name={"dateTimePicker5"}
                                        data-plasmic-override={
                                          overrides.dateTimePicker5
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.dateTimePicker6
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["dateTimePicker6", "value"],
                                          AntdDatePicker_Helpers
                                        ),
                                      popupScopeClassName:
                                        sty["dateTimePicker6__datePickerPopup"],
                                      value: generateStateValueProp($state, [
                                        "dateTimePicker6",
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName:
                                            "dateTimePicker6.value"
                                        }
                                      ],

                                      [],
                                      AntdDatePicker_Helpers ?? {},
                                      child$Props
                                    );
                                    return (
                                      <AntdDatePicker
                                        data-plasmic-name={"dateTimePicker6"}
                                        data-plasmic-override={
                                          overrides.dateTimePicker6
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                  <AntdTooltip
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tooltip__fAuGa
                                    )}
                                    titleText={``}
                                  >
                                    <Select
                                      data-plasmic-name={"select6"}
                                      data-plasmic-override={overrides.select6}
                                      aria-label={``}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.select6
                                      )}
                                      onChange={(...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "select6",
                                          "value"
                                        ])(eventArgs[0]);
                                      }}
                                      options={(() => {
                                        const __composite = [
                                          { value: null, label: null },
                                          { value: null, label: null },
                                          { value: null, label: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null },
                                          { value: null }
                                        ];

                                        __composite["0"]["value"] = "-1";
                                        __composite["0"]["label"] = "Adulti";
                                        __composite["1"]["value"] = "0";
                                        __composite["1"]["label"] = "0";
                                        __composite["2"]["value"] = "1";
                                        __composite["2"]["label"] = "1";
                                        __composite["3"]["value"] = "2";
                                        __composite["4"]["value"] = "3";
                                        __composite["5"]["value"] = "4";
                                        __composite["6"]["value"] = "5";
                                        __composite["7"]["value"] = "6";
                                        __composite["8"]["value"] = "7";
                                        __composite["9"]["value"] = "8";
                                        __composite["10"]["value"] = "9";
                                        return __composite;
                                      })()}
                                      value={generateStateValueProp($state, [
                                        "select6",
                                        "value"
                                      ])}
                                    />
                                  </AntdTooltip>
                                  <Select
                                    data-plasmic-name={"select4"}
                                    data-plasmic-override={overrides.select4}
                                    aria-label={``}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select4
                                    )}
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select4",
                                        "value"
                                      ])(eventArgs[0]);
                                    }}
                                    options={(() => {
                                      const __composite = [
                                        { value: null, label: null },
                                        { value: null, label: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null },
                                        { value: null }
                                      ];

                                      __composite["0"]["value"] = "-1";
                                      __composite["0"]["label"] = "Bambini ";
                                      __composite["1"]["value"] = "1";
                                      __composite["1"]["label"] = "1";
                                      __composite["2"]["value"] = "2";
                                      __composite["3"]["value"] = "3";
                                      __composite["4"]["value"] = "4";
                                      __composite["5"]["value"] = "5";
                                      __composite["6"]["value"] = "6";
                                      __composite["7"]["value"] = "7";
                                      __composite["8"]["value"] = "8";
                                      __composite["9"]["value"] = "9";
                                      __composite["10"]["value"] = "0";
                                      return __composite;
                                    })()}
                                    value={generateStateValueProp($state, [
                                      "select4",
                                      "value"
                                    ])}
                                  />
                                </div>
                              </Stack__>
                              <Button2
                                className={classNames(
                                  "__wab_instance",
                                  sty.button2__zhhPn
                                )}
                                endIcon={
                                  <Icon38Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__ytmVh
                                    )}
                                    role={"img"}
                                  />
                                }
                                startIcon={
                                  <ChecksvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__ikLu7
                                    )}
                                    role={"img"}
                                  />
                                }
                                submitsForm={true}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ni0Hl
                                  )}
                                >
                                  {"Invia prenotazione"}
                                </div>
                              </Button2>
                            </Stack__>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__teQxY
                              )}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cC60
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fk5Ib
                                )}
                              >
                                {
                                  "Inserire un nominativo e un indirizzo e-mail.\nInfine inserire la data di inizio,di fine e il numero di adulti e di bambini ( 0 - 14 anni compresi)"
                                }
                              </div>
                            </div>
                          </div>
                        </Stack__>
                      </Stack__>
                    </Stack__>
                  </Stack__>
                </div>
              </Stack__>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "foreground2",
    "background2",
    "copy",
    "copy3",
    "foreground5",
    "foreground",
    "textbox2",
    "textbox5",
    "textArea",
    "dateTimePicker",
    "dateTimePicker2",
    "select5",
    "select3",
    "foreground3",
    "foreground6",
    "textbox3",
    "textbox6",
    "textArea2",
    "dateTimePicker5",
    "dateTimePicker6",
    "select6",
    "select4"
  ],

  button: ["button"],
  foreground2: ["foreground2"],
  background2: ["background2"],
  copy: ["copy"],
  copy3: ["copy3"],
  foreground5: [
    "foreground5",
    "foreground",
    "textbox2",
    "textbox5",
    "textArea",
    "dateTimePicker",
    "dateTimePicker2",
    "select5",
    "select3"
  ],

  foreground: [
    "foreground",
    "textbox2",
    "textbox5",
    "textArea",
    "dateTimePicker",
    "dateTimePicker2",
    "select5",
    "select3"
  ],

  textbox2: ["textbox2"],
  textbox5: ["textbox5"],
  textArea: ["textArea"],
  dateTimePicker: ["dateTimePicker"],
  dateTimePicker2: ["dateTimePicker2"],
  select5: ["select5"],
  select3: ["select3"],
  foreground3: ["foreground3"],
  foreground6: [
    "foreground6",
    "textbox3",
    "textbox6",
    "textArea2",
    "dateTimePicker5",
    "dateTimePicker6",
    "select6",
    "select4"
  ],

  textbox3: ["textbox3"],
  textbox6: ["textbox6"],
  textArea2: ["textArea2"],
  dateTimePicker5: ["dateTimePicker5"],
  dateTimePicker6: ["dateTimePicker6"],
  select6: ["select6"],
  select4: ["select4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "oim27Bu1ThuTn7RkGgxh5P"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    foreground2: makeNodeComponent("foreground2"),
    background2: makeNodeComponent("background2"),
    copy: makeNodeComponent("copy"),
    copy3: makeNodeComponent("copy3"),
    foreground5: makeNodeComponent("foreground5"),
    foreground: makeNodeComponent("foreground"),
    textbox2: makeNodeComponent("textbox2"),
    textbox5: makeNodeComponent("textbox5"),
    textArea: makeNodeComponent("textArea"),
    dateTimePicker: makeNodeComponent("dateTimePicker"),
    dateTimePicker2: makeNodeComponent("dateTimePicker2"),
    select5: makeNodeComponent("select5"),
    select3: makeNodeComponent("select3"),
    foreground3: makeNodeComponent("foreground3"),
    foreground6: makeNodeComponent("foreground6"),
    textbox3: makeNodeComponent("textbox3"),
    textbox6: makeNodeComponent("textbox6"),
    textArea2: makeNodeComponent("textArea2"),
    dateTimePicker5: makeNodeComponent("dateTimePicker5"),
    dateTimePicker6: makeNodeComponent("dateTimePicker6"),
    select6: makeNodeComponent("select6"),
    select4: makeNodeComponent("select4"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
